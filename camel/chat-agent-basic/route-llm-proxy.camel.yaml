- route:
    id: llm-proxy-main
    from:
      id: llm-proxy-main
      uri: netty-http
      parameters:
        bridgeEndpoint: true
        host: localhost:11400
        matchOnUriPrefix: true
        protocol: http
      steps:
        - convertBodyTo:
            id: convertBodyTo-3467
            type: String
        - setVariable:
            id: setVariable-2686
            description: capture call
            expression:
              simple:
                expression: ${body}
            name: toolcalls
        - to:
            id: to-2165
            uri: netty-http
            parameters:
              host: localhost:11434
              protocol: http
        - convertBodyTo:
            id: convertBodyTo-3614
            type: String
        - choice:
            id: choice-9760
            when:
              - id: when-2735
                steps:
                  - wireTap:
                      uri: direct:generate-mermaid
                      variableSend: toolcalls
                expression:
                  jq:
                    expression: .choices[].finish_reason == "stop"
- route:
    id: generate-mermaid
    from:
      uri: direct
      parameters:
        name: generate-mermaid
      steps:
        - transform:
            disabled: false
            expression:
              jq:
                expression: .messages[1:]
        - log:
            id: log-3690
            disabled: false
            message: "Aggregating result. last: ${variable.global:last}. This round:
              ${body}"
        - aggregate:
            steps:
              - log:
                  message: "aggregation completed: ${body}"
              - setProperty:
                  expression:
                    simple:
                      expression: ${body}
                  name: thebody
              - setVariable:
                  expression:
                    simple:
                      expression: "[]"
                  name: global:alltools
              - split:
                  steps:
                    - log:
                        message: "split: ${body}, alltools: ${variable.global:alltools}"
                    - setProperty:
                        disabled: false
                        expression:
                          simple:
                            expression: ${body}
                        name: thebody
                    - setBody:
                        expression:
                          simple:
                            expression: ${variable.global:alltools}
                    - setVariable:
                        expression:
                          jq:
                            expression: '. + [{"step": property("CamelSplitIndex"),"content":
                              property("thebody") | fromjson  }]'
                        name: global:alltools
                  expression:
                    simple:
                      expression: ${body}
              - log:
                  message: ${variables.global:alltools}
              - setBody:
                  expression:
                    simple:
                      expression: ${variable.global:alltools}
              - setBody:
                  expression:
                    jq:
                      expression: >-
                        def getprompt(text): 
                            text as $myvar | 
                            try (fromjson | .prompt) catch $myvar ;

                        def json2string(text): 
                            text as $myvar | 

                            if(try (tonumber | type == "number") catch false) then
                                $myvar
                            else
                                try (fromjson | 
                                [leaf_paths as $path | "\($path | join(".")): \(getpath($path))"] | join(", ")) catch $myvar 
                            end;

                        map(
                            . as $step | {
                                "step": $step.step,
                                "execution": {
                                    "description": ($step.content[] | 
                                                     select(
                                                        .role == "user"
                                                     ) |
                                                     .content | getprompt(.) 
                                    ),
                                    "tool_calls": (
                                        [$step.content[] | select(.role == "assistant" and .tool_calls) | {
                                            "group": [
                                                .tool_calls[] | . as $call | {
                                                    "tool": {
                                                        "name": (
                                                            .function.name + "_" + .id + ": " + (.function.arguments | fromjson | [leaf_paths as $path | "\($path | join(".")): \(getpath($path))"] | join(", "))
                                                        ),
                                                        "response": (
                                                            (
                                                                $step.content[] | 
                                                                select(
                                                                    .role == "tool" and 
                                                                    .tool_call_id == $call.id
                                                                ) | 
                                                                .content | json2string(.)
                                                            )
                                                        )
                                                    }
                                                }
                                            ]
                                        }]
                                    )
                                }
                            }
                        )
              - log:
                  id: log-2928
                  message: "Mermaid input: ${body}"
              - process:
                  ref: composeGraph
              - to:
                  uri: langchain4j-chat
                  parameters:
                    chatId: graph
                    chatModel: "#chatModelGraphs"
                    chatOperation: CHAT_MULTIPLE_MESSAGES
              - log:
                  message: |-
                    graph:
                    ${body}
              - setBody:
                  expression:
                    simple:
                      expression: ${body.replaceAll('(?s)<think>.*</think>','').trim()}
              - log:
                  message: "Graph (no think section): ${body}"
              - process:
                  id: process-9943
                  ref: findInvoiceId
              - log:
                  id: log-3012
                  message: "Diagram for invoiceid: ${variable.invoiceid}"
              - removeHeaders:
                  pattern: "*"
              - setHeader:
                  id: setHeader-3789
                  expression:
                    simple:
                      expression: ${variable.invoiceid}
                  name: invoiceid
              - to:
                  uri: http
                  parameters:
                    httpUri: localhost:8100/dashboard/diagram
            aggregationStrategy: "#class:org.apache.camel.processor.aggregate.GroupedBodyAg\
              gregationStrategy"
            completionPredicate:
              simple:
                expression: ${variable.global:last} == true
            correlationExpression:
              constant:
                expression: "true"
            eagerCheckCompletion: true
