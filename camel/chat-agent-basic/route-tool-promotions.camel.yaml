- beans:
    - name: PostgresqlDataSource
      properties:
        databaseName: demo
        password: camel
        portNumber: 5432
        serverName: localhost
        user: camel
      type: org.postgresql.ds.PGSimpleDataSource
- route:
    id: route-1612
    description: get promotions
    from:
      uri: langchain4j-tools
      parameters:
        description: get active promotions
        tags: all
        toolId: get-promotions
      steps:
        - to:
            uri: sql:SELECT id,type,description FROM promotions
            parameters:
              dataSource: "#PostgresqlDataSource"
        - marshal:
            json: {}
        - setBody:
            expression:
              simple:
                expression: "{\"howto\":\"Use the pattern 'id: description'\", \"result\":
                  ${body}}"
        - log:
            message: ${body}
- route:
    id: route-3070
    description: award promotion
    from:
      uri: langchain4j-tools
      parameters:
        description: awards a promotion to a customer
        parameter.invoiceid: number
        parameter.promotionid: number
        tags: all
        toolId: award-promotion
      steps:
        - convertHeaderTo:
            name: promotionid
            type: Integer
        - setVariable:
            id: setVariable-2370
            expression:
              simple:
                expression: ${header.promotionid}
            name: promotionid
        - setVariable:
            description: set invoiceid
            expression:
              simple:
                expression: ${header.invoiceid}
            name: invoiceid
        - to:
            description: get promotion details
            uri: sql
            parameters:
              dataSource: "#PostgresqlDataSource"
              query: SELECT id, type,description,quantity,discount FROM promotions WHERE id =
                CAST(:#promotionid AS INTEGER);
        - marshal:
            json: {}
            variableReceive: promotion-details
        - log:
            id: log-2364
            message: "promotions: ${body}, length: ${body.size}"
        - choice:
            id: choice-1855
            otherwise:
              steps:
                - to:
                    description: process-award
                    uri: direct
                    parameters:
                      name: process-award
            when:
              - id: when-2202
                description: when no data
                steps:
                  - setBody:
                      id: setBody-4141
                      expression:
                        simple:
                          expression: >-
                            {
                              "status":"error",
                              "details":"The promotion ID provided does not exist. Call tool 'getActivePromotions' to obtain existing IDs and try again."
                            }
                expression:
                  simple:
                    expression: ${body.size} == 0
- route:
    id: process-award
    from:
      uri: direct
      parameters:
        name: process-award
      steps:
        - to:
            id: to-1345
            uri: direct
            parameters:
              name: get-customer-data
        - to:
            id: to-1274
            uri: direct
            parameters:
              name: apply-reward
        - setBody:
            disabled: false
            expression:
              simple:
                expression: >-
                  {
                    "prompt": "Communicate to the customer they have been awarded a promotion as a thank you gesture of gratitude from us. Include information about the promotion awarded.",
                    "input-data":{
                      "customer-details": ${jq(variable:customer-details, del(.[].taxid))},
                      "promotion-details": ${jq(variable:promotion-details, del(.[].id))}
                    }
                  }
        - log:
            id: log-9032
            message: "ai input: ${body}"
        - to:
            uri: direct
            parameters:
              name: agent-emails
            disabled: false
        - setBody:
            expression:
              simple:
                expression: '{"status":"done"}'
        - log:
            message: ${body}
- route:
    id: compose-email-deprecated
    from:
      uri: direct
      parameters:
        name: compose-email-deprecated
      steps:
        - setBody:
            expression:
              simple:
                expression: ${variable.promotion-details}\n\n${body}
        - process:
            ref: composeEmail
        - to:
            uri: langchain4j-chat
            parameters:
              chatId: sim
              chatModel: "#chatModelEmails"
              chatOperation: CHAT_MULTIPLE_MESSAGES
        - log:
            message: "email: ${body}"
        - setVariable:
            expression:
              simple:
                expression: ${variable.invoiceid}_${date:now}.txt
            name: filename
        - log:
            message: "file key: ${variable.filename}"
        - setHeader:
            expression:
              simple:
                expression: text
            name: CamelAwsS3ContentType
        - to:
            uri: aws2-s3
            parameters:
              accessKey: minio
              bucketNameOrArn: outbox
              forcePathStyle: true
              keyName: ${variable.filename}
              overrideEndpoint: true
              region: ap-south-2
              secretKey: minio123
              uriEndpointOverride: https://minio-api-demo.apps.cluster-8lqf8.8lqf8.sandbox2778.opentlc.com
- route:
    id: get-customer-data
    from:
      id: get-customer-data
      uri: direct
      parameters:
        name: get-customer-data
      steps:
        - toD:
            uri: sql
            parameters:
              dataSource: "#PostgresqlDataSource"
              query: SELECT c.taxid, c.email, c.name FROM customers c JOIN invoices i ON
                c.taxid = i.taxid WHERE i.id = '${variable.invoiceid}'
        - marshal:
            id: marshal-3167
            json: {}
            variableReceive: customer-details
        - log:
            disabled: true
            message: Query result:${body} InvoiceId:${variable.invoiceid}
- route:
    id: apply-reward
    from:
      uri: direct
      parameters:
        name: apply-reward
      steps:
        - toD:
            uri: sql
            parameters:
              query: >-
                INSERT INTO awards (customerid, promotionid, quantity) 

                SELECT '${jq(variable:customer-details, .[].taxid)}', id,
                quantity 

                FROM promotions 

                WHERE id = ${variable.promotionid}
        - log:
            id: log-5140
            disabled: true
            message: "awards in DB: ${body}"
        - log:
            message: "taxid: ${jq(variable:customer-details, .[].taxid)}
              InvoiceId:${variable.invoiceid}, promotion ID:
              ${variable.promotionid}"
