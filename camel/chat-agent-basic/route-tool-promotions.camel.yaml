- beans:
    - name: PostgresqlDataSource
      properties:
        databaseName: demo
        password: camel
        portNumber: "{{database.postgresql.port}}"
        serverName: "{{database.postgresql.host}}"
        user: camel
      type: org.postgresql.ds.PGSimpleDataSource
- route:
    id: get-promotions
    description: get promotions
    from:
      uri: langchain4j-tools
      parameters:
        description: get active promotions
        tags: all
        toolId: get-promotions
      steps:
        - to:
            uri: sql:SELECT id,type,description FROM promotions
            parameters:
              dataSource: "#PostgresqlDataSource"
        - marshal:
            json: {}
        - setBody:
            expression:
              simple:
                expression: |-
                  {
                      "howto":"Use the pattern 'id: description'", 
                      "result": ${body}
                  }
- route:
    id: award-promotion
    description: award promotion
    from:
      uri: langchain4j-tools
      parameters:
        description: awards a promotion to a customer
        parameter.invoiceid: number
        parameter.promotionid: number
        tags: all
        toolId: award-promotion
      steps:
        - convertHeaderTo:
            name: promotionid
            type: Integer
        - setVariable:
            id: setVariable-2370
            expression:
              simple:
                expression: ${header.promotionid}
            name: promotionid
        - setVariable:
            description: set invoiceid
            expression:
              simple:
                expression: ${header.invoiceid}
            name: invoiceid
        - to:
            description: get-promotion-data
            uri: direct
            parameters:
              name: get-promotion-data
        - to:
            description: get-customer-data
            uri: direct
            parameters:
              name: get-customer-data
        - choice:
            otherwise:
              steps:
                - to:
                    description: process-award
                    uri: direct
                    parameters:
                      name: process-award
            when:
              - description: when no promotions
                steps:
                  - setBody:
                      description: set error
                      expression:
                        simple:
                          expression: >-
                            {
                              "status":"error",
                              "details":"The promotion ID provided does not exist. Call tool 'getActivePromotions' to obtain existing IDs and try again."
                            }
                expression:
                  simple:
                    expression: ${jq(variable:promotion-details,length)} == 0
              - description: when no customer data
                steps:
                  - setBody:
                      description: set error
                      expression:
                        simple:
                          expression: >-
                            {
                              "status":"error",
                              "details":"The invoice ID provided does not exist. Use an existing invoice ID and try again."
                            }
                expression:
                  simple:
                    expression: ${jq(variable:customer-details,length)} == 0
- route:
    id: process-award
    from:
      uri: direct
      parameters:
        name: process-award
      steps:
        - to:
            id: to-1274
            uri: direct
            parameters:
              name: apply-reward
        - setBody:
            disabled: false
            expression:
              simple:
                expression: >-
                  {
                    "prompt": "Communicate to the customer they have been awarded a promotion as a thank you gesture of gratitude from us. Include information about the promotion awarded.",
                    "input-data":{
                      "customer-details": ${jq(variable:customer-details, del(.[].taxid))},
                      "promotion-details": ${jq(variable:promotion-details, del(.[].id))}
                    }
                  }
        - log:
            id: log-9032
            message: "ai input: ${body}"
        - to:
            uri: direct
            parameters:
              name: agent-emails
            disabled: false
        - setBody:
            expression:
              simple:
                expression: '{"status":"done"}'
        - log:
            message: ${body}
- route:
    id: get-promotion-data
    from:
      id: get-promotion-data
      uri: direct
      parameters:
        name: get-promotion-data
      steps:
        - to:
            description: get promotion details
            uri: sql
            parameters:
              dataSource: "#PostgresqlDataSource"
              query: SELECT id, type,description,quantity,discount FROM promotions WHERE id =
                CAST(:#promotionid AS INTEGER);
        - marshal:
            json: {}
            variableReceive: promotion-details
        - log:
            message: "promotion details: ${variable.promotion-details}, length:
              ${jq(variable:promotion-details,length)}"
- route:
    id: get-customer-data
    from:
      id: get-customer-data
      uri: direct
      parameters:
        name: get-customer-data
      steps:
        - toD:
            uri: sql
            parameters:
              dataSource: "#PostgresqlDataSource"
              query: SELECT c.taxid, c.email, c.name FROM customers c JOIN invoices i ON
                c.taxid = i.taxid WHERE i.id = '${variable.invoiceid}'
        - marshal:
            id: marshal-3167
            json: {}
            variableReceive: customer-details
        - log:
            disabled: false
            message: "Query result:${body} InvoiceId:${variable.invoiceid}, details:
              ${variable.customer-details}, length:
              ${jq(variable:customer-details,length)}"
- route:
    id: apply-reward
    from:
      uri: direct
      parameters:
        name: apply-reward
      steps:
        - toD:
            uri: sql
            parameters:
              query: >-
                INSERT INTO awards (customerid, promotionid, quantity) 

                SELECT '${jq(variable:customer-details, .[].taxid)}', id,
                quantity 

                FROM promotions 

                WHERE id = ${variable.promotionid}
        - log:
            id: log-5140
            disabled: true
            message: "awards in DB: ${body}"
        - log:
            message: "taxid: ${jq(variable:customer-details, .[].taxid)}
              InvoiceId:${variable.invoiceid}, promotion ID:
              ${variable.promotionid}"
