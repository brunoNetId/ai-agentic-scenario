<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard</title>
    <script src="https://cdn.jsdelivr.net/npm/mermaid@11.6.0/dist/mermaid.min.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f4f4f4;
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        h1 {
            text-align: center;
            margin-bottom: 20px;
        }
        .status-indicator {
            display: inline-block;
            width: 10px;
            height: 10px;
            border-radius: 50%;
            margin-left: 10px;
        }
        .connected {
            background-color: green;
        }
        .disconnected {
            background-color: red;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            background-color: #fff;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        th, td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
        th {
            background-color: #e0e7ff;
            color: #333;
        }
        tr:nth-child(even) {
            background-color: #f9f9f9;
        }
        tr:nth-child(odd) {
            background-color: #ffffff;
        }
        .summary, .execution-plan {
            width: 25%;
        }
        .id {
            width: 100px;
        }
        .status {
            width: 150px;
        }
        .actions {
            width: 200px;
        }
        .details {
            width: 150px;
        }
        button {
            padding: 8px 12px;
            margin-right: 5px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
        .approve-btn {
            background-color: #28a745;
            color: white;
        }
        .discard-btn {
            background-color: #dc3545;
            color: white;
        }
        .remove-btn {
            background-color: #6c757d;
            color: white;
        }
        .spinner {
            display: inline-block;
            width: 16px;
            height: 16px;
            border: 2px solid #ccc;
            border-top: 2px solid #333;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            vertical-align: middle;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .popup {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 4px 10px rgba(0,0,0,0.2);
            z-index: 1000;
            max-height: 80vh;
            overflow-y: auto;
        }
        .diagram-popup {
            width: 90%;
            max-width: 1200px;
        }
        .popup-header {
            position: sticky;
            top: 0;
            background-color: white;
            padding: 10px 0;
            z-index: 1001;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 1px solid #ddd;
        }
        .popup-content {
            margin-top: 20px;
        }
        .overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
            z-index: 999;
        }
        ul {
            margin: 0;
            padding-left: 20px;
        }
    </style>
</head>
<body>
    <h1>Admin Dashboard <span class="status-indicator disconnected"></span></h1>
    <table id="adminTable">
        <thead>
            <tr>
                <th class="id">ID</th>
                <th class="summary">Summary</th>
                <th class="execution-plan">Execution Plan</th>
                <th class="status">Status</th>
                <th class="actions">Actions</th>
                <th class="details">Details</th>
            </tr>
        </thead>
        <tbody></tbody>
    </table>

    <script>
        let ws;
        let reconnectInterval;
        const tableBody = document.querySelector('#adminTable tbody');
        const statusIndicator = document.querySelector('.status-indicator');

        function connectWebSocket() {
            ws = new WebSocket('ws://localhost:8100');
            
            ws.onopen = () => {
                console.log('WebSocket connected');
                statusIndicator.classList.remove('disconnected');
                statusIndicator.classList.add('connected');
                clearInterval(reconnectInterval);
            };

            ws.onmessage = (event) => {
                const data = JSON.parse(event.data);
                handleServerEvent(data);
            };

            ws.onclose = () => {
                console.log('WebSocket disconnected');
                statusIndicator.classList.remove('connected');
                statusIndicator.classList.add('disconnected');
                reconnectInterval = setInterval(connectWebSocket, 1000);
            };

            ws.onerror = (error) => {
                console.error('WebSocket error:', error);
                ws.close();
            };
        }

        function handleServerEvent(data) {
            if (data.executionSummary) {
                updateRowWithCompletion(data);
            } else if (data.diagram) {
                updateRowWithDiagram(data);
            } else {
                addOrUpdateRow(data);
            }
        }

        function addOrUpdateRow(data) {
            let row = document.querySelector(`tr[data-id="${data.id}"]`);
            if (!row) {
                row = document.createElement('tr');
                row.setAttribute('data-id', data.id);
                tableBody.appendChild(row);
            }

            row.innerHTML = `
                <td>${data.id}</td>
                <td>${data.summary || ''}</td>
                <td><ul>${(data.executionPlan || []).map(plan => `<li>${plan}</li>`).join('')}</ul></td>
                <td>Pending Approval</td>
                <td>
                    <button class="approve-btn" onclick="handleAction('${data.id}', 'approve')">Approve</button>
                    <button class="discard-btn" onclick="handleAction('${data.id}', 'discard')">Discard</button>
                </td>
                <td></td>
            `;
        }

        function updateRowWithCompletion(data) {
            const row = document.querySelector(`tr[data-id="${data.id}"]`);
            if (row) {
                const statusCell = row.cells[3];
                const actionsCell = row.cells[4];
                const detailsCell = row.cells[5];

                statusCell.textContent = 'Completed';
                actionsCell.innerHTML = `<button class="remove-btn" onclick="handleAction('${data.id}', 'remove')">Remove</button>`;
                
                const summaryHtml = formatExecutionSummary(data.executionSummary);
                detailsCell.innerHTML = `<a href="#" onclick="showPopup('Execution Summary', \`${summaryHtml}\`, '${data.id}')">View Summary</a>`;
            }
        }

        function updateRowWithDiagram(data) {
            const row = document.querySelector(`tr[data-id="${data.id}"]`);
            if (row) {
                const detailsCell = row.cells[5];
                const existingContent = detailsCell.innerHTML;
                detailsCell.innerHTML = `${existingContent} <a href="#" onclick="showDiagramPopup('${data.diagram}', '${data.id}')">View Diagram</a>`;
            }
        }

        function formatExecutionSummary(summary) {
            let html = '<ul>';
            for (const [key, value] of Object.entries(summary)) {
                if (Array.isArray(value)) {
                    html += `<li>${key}: <ul>${value.map(item => `<li>${item}</li>`).join('')}</ul></li>`;
                } else {
                    html += `<li>${key}: ${value}</li>`;
                }
            }
            html += '</ul>';
            return html;
        }

        function showPopup(title, content, id) {
            const overlay = document.createElement('div');
            overlay.className = 'overlay';

            const popup = document.createElement('div');
            popup.className = 'popup';
            popup.innerHTML = `
                <div class="popup-header">
                    <h2>${title}</h2>
                    <button onclick="closePopup()">Close</button>
                </div>
                <div class="popup-content">${content}</div>
            `;

            document.body.appendChild(overlay);
            document.body.appendChild(popup);
        }

        function showDiagramPopup(base64Diagram, id) {
            const overlay = document.createElement('div');
            overlay.className = 'overlay';

            const popup = document.createElement('div');
            popup.className = 'popup diagram-popup';
            popup.innerHTML = `
                <div class="popup-header">
                    <h2>Execution Diagram</h2>
                    <button onclick="closePopup()">Close</button>
                </div>
                <div class="popup-content">
                    <div class="mermaid">${atob(base64Diagram)}</div>
                </div>
            `;

            document.body.appendChild(overlay);
            document.body.appendChild(popup);
            mermaid.init(undefined, popup.querySelector('.mermaid'));
        }

        function closePopup() {
            const popup = document.querySelector('.popup');
            const overlay = document.querySelector('.overlay');
            if (popup) popup.remove();
            if (overlay) overlay.remove();
        }

        function handleAction(id, action) {
            const row = document.querySelector(`tr[data-id="${id}"]`);
            if (!row) return;

            const statusCell = row.cells[3];
            const actionsCell = row.cells[4];

            if (action === 'approve') {
                statusCell.innerHTML = 'Processing... <span class="spinner"></span>';
                actionsCell.innerHTML = `<button class="remove-btn" onclick="handleAction('${id}', 'remove')">Remove</button>`;
                ws.send(JSON.stringify({ id, action: 'approve' }));
            } else if (action === 'discard') {
                statusCell.textContent = 'Discarded';
                actionsCell.innerHTML = `<button class="remove-btn" onclick="handleAction('${id}', 'remove')">Remove</button>`;
            } else if (action === 'remove') {
                ws.send(JSON.stringify({ id, action: 'remove' }));
                row.remove();
            }
        }

        // Initialize WebSocket connection
        connectWebSocket();
    </script>
</body>
</html>