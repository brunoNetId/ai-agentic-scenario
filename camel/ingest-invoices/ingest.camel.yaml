- route:
    id: ingestor
    from:
      uri: aws2-s3
      parameters:
        accessKey: minio
        bucketNameOrArn: ingest
        destinationBucket: invoices
        forcePathStyle: true
        moveAfterRead: true
        overrideEndpoint: true
        region: ap-south-2
        secretKey: minio123
        uriEndpointOverride: https://minio-api-demo.apps.cluster-8lqf8.8lqf8.sandbox2778.opentlc.com
      steps:
        - to:
            uri: direct
            parameters:
              name: get-doc-urls
        - to:
            uri: direct
            parameters:
              name: pdf-to-docling-json
        - to:
            uri: direct
            parameters:
              name: docling-to-invoice-json
        - to:
            uri: direct
            parameters:
              name: prepare-data
        - to:
            uri: direct
            parameters:
              name: to-vector-db
        - to:
            uri: direct
            parameters:
              name: insert-customer-db
- route:
    id: pdf-to-docling-json
    from:
      uri: direct
      parameters:
        name: pdf-to-docling-json
      steps:
        - setVariable:
            disabled: true
            expression:
              simple:
                expression: ${body}
            name: invoice-url
        - setBody:
            expression:
              simple:
                expression: |-
                  {
                    "from_format": [
                      "pdf"
                    ],
                    "to_format": "json",
                    "ocr": false,
                    "force_ocr": false,
                    "table_mode": "fast",
                    "source": "${variable.invoice-url}"
                  }
        - log:
            id: log-1667
            message: Calling Docling to covert PDF to JSON...\n${body}
        - removeHeaders:
            id: removeHeaders-2869
            disabled: true
            pattern: ^(?!CamelAws).*$
        - setHeader:
            id: setHeader-3267
            disabled: true
            expression:
              constant:
                expression: ingest
            name: CamelAwsS3BucketName
        - to:
            id: to-3981
            uri: https
            parameters:
              httpUri: docling-server-demo.apps.cluster-8lqf8.8lqf8.sandbox2778.opentlc.com/process_url
            disabled: false
        - log:
            disabled: false
            message: ${body}




- route:
    id: docling-to-invoice-json
    from:
      uri: direct
      parameters:
        name: docling-to-invoice-json
      steps:
        - setBody:
            jq:
              expression: >-
                def next_idx($num; $indexes):
                  [ $indexes[] | select(. > $num) ] | sort | .[0];

                def removeDuplicates($values):
                  reduce $values[] as $item ({}; if has($item) then . else . + {($item): null} end) | keys_unsorted;

                . as $data | $data.texts
                | (map(.text | startswith("Seller:")) | index(true)) as $seller_idx
                | (map(.text | startswith("Client:")) | index(true)) as $client_idx
                | (map(.text | startswith("ITEMS")) | index(true)) as $items_idx
                | (map(.text | startswith("SUMMARY")) | index(true)) as $summary_idx
                | $data.texts | (length) as $last_idx
                | [$seller_idx,$client_idx,$items_idx,$summary_idx,$last_idx] as $indexes
                | ($data.tables[0].data.table_cells | map(.text) | [ range(0; length; 8) as $i | { Item: .[$i:$i+8]} ] | .[1:]) as $items
                | ($data.tables[1].data.table_cells | map(.text) | [ range(0; length; 4) as $i | { Entry: .[$i:$i+4]} ] | .[1:]) as $summary
                | {
                    #uncomment to debug# indexes: $indexes,
                    #uncomment to debug# rangeS: [$seller_idx, next_idx($seller_idx;$indexes)],
                    #uncomment to debug# rangeC: [$client_idx, next_idx($client_idx;$indexes)],
                    InvoiceNumber: ($data.texts[0].text | split(": ")[1]),
                    DateOfIssue: ($data.texts[2].text | gsub("/"; "")),
                    "Seller": .[$seller_idx+1:next_idx($seller_idx;$indexes)] | [.[].text] | removeDuplicates(.),
                    "Client": .[$client_idx+1:next_idx($client_idx;$indexes)] | [.[].text] | removeDuplicates(.),
                    "Items": $items,
                    "Summary": $summary
                  }
        - log:
            message: "trimmed JSON: ${body}"
        - unmarshal:
            json: {}
        - marshal:
            jacksonXml:
              prettyPrint: true
        - log: "trimmed XML: ${body}"
        - to:
            uri: xslt-saxon:format-invoice.xsl
        - log:
            message: "XML invoice: ${body}"
        - unmarshal:
            jacksonXml:
              unmarshalType: java.util.LinkedHashMap
        - marshal:
            json: {}
        # - to: xj:identity?transformDirection=XML2JSON
        - log:
            message: "JSON invoice: ${body}"

- route:
    id: prepare-data
    from:
      uri: direct
      parameters:
        name: prepare-data
      steps:
        - setVariable:
            expression:
              simple:
                expression: ${body}
            name: metadata
        - setVariable:
            expression:
              jq:
                expression: '.InvoiceNumber'
                resultType: java.lang.String
            name: invoice
        - setVariable:
            expression:
              jq:
                expression: >-
                  .Seller.IBAN
            name: iban
        - setVariable:
            expression:
              jq:
                expression: >-
                  .Client.TaxId
                resultType: java.lang.String
            name: taxid
        - setVariable:
            expression:
              jq:
                expression: >-
                  .Client.Name
                resultType: java.lang.String
            name: name
        - setVariable:
            expression:
              jq:
                expression: >-
                  .Client.Name
                  | [match("[a-zA-Z]+"; "g") | .string] 
                  | (.[0] + "@" + .[0] + "-" + .[1] + ".com")
                resultType: java.lang.String
            name: email
        - log:
            message: "invoice: ${variable.invoice}, name: ${variable.name}, email: ${variable.email}, iban: ${variable.iban}, taxid: ${variable.taxid}"

        - split:
            steps:
              - log:
                  message: "split is: ${body}"
              - setBody:
                  expression:
                    jq:
                      expression: .Description + "\\n" | sub("\""; "\\\""; "g")
            aggregationStrategy: "#myaggregator"
            expression:
              jq:
                # expression: .Items.Item
                expression: .Items.Item | if type == "array" then . else [.] end
            parallelProcessing: false
        - log:
            message: "result: ${body}"
        - to:
            uri: langchain4j-embeddings:test?embeddingModel=#class:dev.langchain4j.model.embedding.AllMiniLmL6V2EmbeddingModel
        - setVariable:
            expression:
              simple:
                expression: ${header.CamelLangChain4jEmbeddingsVector}
                resultType: dev.langchain4j.data.embedding.Embedding
            name: vector



- route:
    id: insert in Vector DB
    from:
      uri: direct
      parameters:
        name: to-vector-db
      steps:            
        - setHeaders:
            headers:
              - expression:
                  constant:
                    expression: Bearer root:Milvus
                name: Authorization
              - expression:
                  constant:
                    expression: application/json
                name: Content-Type
        - setBody:
            expression:
              simple:
                expression: >-
                  {
                      "collectionName": "mycollection",
                      "data": [{
                          "iban": "${variable.iban}",
                          "invoice": ${variable.invoice},
                          "text": "${body}",
                          "pdf": "${variable.db-invoice-url}",
                          "vector": ${variable.vector.vectorAsList()},
                          "metadata": ${variable.metadata}
                      }]
                  }
        - log:
            disabled: false
            message: "Milvus insert: ${body}"
        - to:
            uri: https
            parameters:
              httpUri: https://milvus-milvus.apps.cluster-8lqf8.8lqf8.sandbox2778.opentlc.com/v2/vectordb/entities/insert
        - log:
            message: ${body}


- beans:
    - name: myaggregator
      type: org.apache.camel.processor.aggregate.StringAggregationStrategy
- route:
    id: get-doc-urls
    from:
      id: from-9998
      uri: direct
      parameters:
        name: get-doc-urls
      steps:
        - log:
            id: log-2723
            message: "File Name: ${header.CamelAwsS3Key}"
        - to:
            id: to-2146
            uri: log
            parameters:
              loggerName: InfoLogger
              showAll: false
              showBody: false
              showHeaders: true
            disabled: true
        - setHeader:
            id: setHeader-6679
            disabled: false
            expression:
              simple:
                expression: "604800"
            name: CamelMinioPresignedURLExpirationTime
        - toD:
            uri: minio
            parameters:
              accessKey: minio
              autoCreateBucket: false
              bucketName: ingest
              endpoint: https://minio-api-demo.apps.cluster-8lqf8.8lqf8.sandbox2778.opentlc.com
              keyName: ${header.CamelAwsS3Key}
              operation: createDownloadLink
              secretKey: minio123
            variableReceive: invoice-url
        - toD:
            uri: minio
            parameters:
              accessKey: minio
              autoCreateBucket: false
              bucketName: invoices
              endpoint: https://minio-api-demo.apps.cluster-8lqf8.8lqf8.sandbox2778.opentlc.com
              keyName: ${header.CamelAwsS3Key}
              operation: createDownloadLink
              secretKey: minio123
            variableReceive: db-invoice-url
        - log:
            disabled: true
            message: "expiry time: ${header. CamelMinioPresignedURLExpirationTime}"
- beans:
    - name: PostgresqlDataSource
      properties:
        databaseName: demo
        password: camel
        portNumber: 5432
        serverName: localhost
        user: camel
      type: org.postgresql.ds.PGSimpleDataSource
- route:
    id: route-3160
    description: insert-customer-db
    from:
      uri: direct:insert-customer-db
      steps:
        - to:
            uri: sql
            parameters:
              query: INSERT INTO CUSTOMERS (taxid, email, name) VALUES (:#${variable.taxid},
                :#${variable.email}, :#${variable.name})
        - to:
            uri: sql
            parameters:
              query: INSERT INTO INVOICES (id, taxid) VALUES (:#${variable.invoice}, :#${variable.taxid})

